{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "version": "5.131",
  "title": "VK API JSON Schema",
  "description": "Contains JSON Schema documents explaining the VK.COM API objects and methods",
  "termsOfService": "https://dev.vk.com/rules",
  "methods": [
    {
      "name": "wall.checkCopyrightLink",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "link",
          "type": "string",
          "required": true
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_bool_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_check_link_cant_determine_source"
        }
      ]
    },
    {
      "name": "wall.closeComments",
      "access_token_type": [
        "user",
        "group"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "type": "integer",
          "required": true,
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "type": "integer",
          "required": true,
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_bool_response"
        }
      }
    },
    {
      "name": "wall.createComment",
      "description": "Adds a comment to a post on a user wall or community wall.",
      "access_token_type": [
        "user",
        "group"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "from_group",
          "description": "Group ID.",
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "entity": "owner"
        },
        {
          "name": "message",
          "description": "(Required if 'attachments' is not set.) Text of the comment.",
          "type": "string"
        },
        {
          "name": "reply_to_comment",
          "description": "ID of comment to reply.",
          "type": "integer"
        },
        {
          "name": "attachments",
          "description": "(Required if 'message' is not set.) List of media objects attached to the comment, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media ojbect: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. For example: \"photo100172_166443618,photo66748_265827614\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "name": "sticker_id",
          "description": "Sticker ID.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "guid",
          "description": "Unique identifier to avoid repeated comments.",
          "type": "string"
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_createComment_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_add_reply"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_reply_owner_flood"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_links_forbidden"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_replies"
        }
      ]
    },
    {
      "name": "wall.delete",
      "description": "Deletes a post from a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "ID of the post to be deleted.",
          "type": "integer",
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_post"
        }
      ]
    },
    {
      "name": "wall.deleteComment",
      "description": "Deletes a comment on a post on a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "comment_id",
          "description": "Comment ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_comment"
        }
      ]
    },
    {
      "name": "wall.edit",
      "description": "Edits a post on a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "friends_only",
          "type": "boolean"
        },
        {
          "name": "message",
          "description": "(Required if 'attachments' is not set.) Text of the post.",
          "type": "string"
        },
        {
          "name": "attachments",
          "description": "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error is thrown.\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "name": "services",
          "type": "string"
        },
        {
          "name": "signed",
          "type": "boolean"
        },
        {
          "name": "publish_date",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "lat",
          "type": "number"
        },
        {
          "name": "long",
          "type": "number"
        },
        {
          "name": "place_id",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "mark_as_ads",
          "type": "boolean"
        },
        {
          "name": "close_comments",
          "type": "boolean"
        },
        {
          "name": "donut_paid_duration",
          "type": "integer"
        },
        {
          "name": "poster_bkg_id",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "poster_bkg_owner_id",
          "type": "integer"
        },
        {
          "name": "poster_bkg_access_hash",
          "type": "string"
        },
        {
          "name": "copyright",
          "type": "string"
        },
        {
          "name": "topic_id",
          "description": "Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method",
          "type": "integer",
          "minimum": 0,
          "enum": [
            0,
            1,
            7,
            12,
            16,
            19,
            21,
            23,
            25,
            26,
            32,
            43
          ],
          "enumNames": [
            "empty_topic",
            "art",
            "it",
            "games",
            "music",
            "photo",
            "science_and_tech",
            "sport",
            "travel",
            "tv_and_cinema",
            "humor",
            "fashion"
          ]
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_edit_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_post_limit_reached"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_donut"
        }
      ]
    },
    {
      "name": "wall.editAdsStealth",
      "description": "Allows to edit hidden post.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID. Used for publishing of scheduled and suggested posts.",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "message",
          "description": "(Required if 'attachments' is not set.) Text of the post.",
          "type": "string"
        },
        {
          "name": "attachments",
          "description": "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error will be thrown.\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "name": "signed",
          "description": "Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)",
          "type": "boolean"
        },
        {
          "name": "lat",
          "description": "Geographical latitude of a check-in, in degrees (from -90 to 90).",
          "type": "number"
        },
        {
          "name": "long",
          "description": "Geographical longitude of a check-in, in degrees (from -180 to 180).",
          "type": "number"
        },
        {
          "name": "place_id",
          "description": "ID of the location where the user was tagged.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "link_button",
          "description": "Link button ID",
          "type": "string"
        },
        {
          "name": "link_title",
          "description": "Link title",
          "type": "string"
        },
        {
          "name": "link_image",
          "description": "Link image url",
          "type": "string"
        },
        {
          "name": "link_video",
          "description": "Link video ID in format \"<owner_id>_<media_id>\"",
          "type": "string"
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_post_limit_reached"
        }
      ]
    },
    {
      "name": "wall.editComment",
      "description": "Edits a comment on a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "comment_id",
          "description": "Comment ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "message",
          "description": "New comment text.",
          "type": "string"
        },
        {
          "name": "attachments",
          "description": "List of objects attached to the comment, in the following format: , \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. For example: \"photo100172_166443618,photo66748_265827614\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      }
    },
    {
      "name": "wall.get",
      "description": "Returns a list of posts on a user wall or community wall.",
      "access_token_type": [
        "user",
        "service"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "domain",
          "description": "User or community short address.",
          "type": "string"
        },
        {
          "name": "offset",
          "description": "Offset needed to return a specific subset of posts.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "count",
          "description": "Number of posts to return (maximum 100).",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "filter",
          "type": "string",
          "$ref": "../wall/objects.json#/definitions/wall_get_filter"
        },
        {
          "name": "extended",
          "description": "'1' — to return 'wall', 'profiles', and 'groups' fields, '0' — to return no additional fields (default)",
          "type": "boolean"
        },
        {
          "name": "fields",
          "type": "array",
          "items": {
            "$ref": "../base/objects.json#/definitions/base_user_group_fields"
          }
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_get_response"
        },
        "extendedResponse": {
          "$ref": "../wall/responses.json#/definitions/wall_get_extended_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_blocked"
        }
      ]
    },
    {
      "name": "wall.getById",
      "description": "Returns a list of posts from user or community walls by their IDs.",
      "access_token_type": [
        "user",
        "service"
      ],
      "parameters": [
        {
          "name": "posts",
          "description": "User or community IDs and post IDs, separated by underscores. Use a negative value to designate a community ID. Example: \"93388_21539,93388_20904,2943_4276,-1_1\"",
          "type": "array",
          "required": true,
          "items": {
            "type": "string"
          }
        },
        {
          "name": "extended",
          "description": "'1' — to return user and community objects needed to display posts, '0' — no additional fields are returned (default)",
          "type": "boolean"
        },
        {
          "name": "copy_history_depth",
          "description": "Sets the number of parent elements to include in the array 'copy_history' that is returned if the post is a repost from another wall.",
          "type": "integer",
          "default": 2
        },
        {
          "name": "fields",
          "type": "array",
          "items": {
            "$ref": "../base/objects.json#/definitions/base_user_group_fields"
          }
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_getById_legacy_response"
        },
        "extendedResponse": {
          "$ref": "../wall/responses.json#/definitions/wall_getById_extended_response"
        }
      }
    },
    {
      "name": "wall.getComment",
      "description": "Returns a comment on a post on a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "comment_id",
          "description": "Comment ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "extended",
          "type": "boolean"
        },
        {
          "name": "fields",
          "type": "array",
          "items": {
            "$ref": "../base/objects.json#/definitions/base_user_group_fields"
          }
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_getComment_response"
        },
        "extendedResponse": {
          "$ref": "../wall/responses.json#/definitions/wall_getComment_extended_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_replies"
        }
      ]
    },
    {
      "name": "wall.getComments",
      "description": "Returns a list of comments on a post on a user wall or community wall.",
      "access_token_type": [
        "user",
        "service"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "need_likes",
          "description": "'1' — to return the 'likes' field, '0' — not to return the 'likes' field (default)",
          "type": "boolean"
        },
        {
          "name": "start_comment_id",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "offset",
          "description": "Offset needed to return a specific subset of comments.",
          "type": "integer"
        },
        {
          "name": "count",
          "description": "Number of comments to return (maximum 100).",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "sort",
          "description": "Sort order: 'asc' — chronological, 'desc' — reverse chronological",
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "enumNames": [
            "chronological",
            "reverse chronological"
          ]
        },
        {
          "name": "preview_length",
          "description": "Number of characters at which to truncate comments when previewed. By default, '90'. Specify '0' if you do not want to truncate comments.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "extended",
          "type": "boolean"
        },
        {
          "name": "fields",
          "type": "array",
          "items": {
            "$ref": "../base/objects.json#/definitions/base_user_group_fields"
          }
        },
        {
          "name": "comment_id",
          "description": "Comment ID.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "thread_items_count",
          "description": "Count items in threads.",
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "maximum": 10
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_getComments_response"
        },
        "extendedResponse": {
          "$ref": "../wall/responses.json#/definitions/wall_getComments_extended_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_replies"
        }
      ]
    },
    {
      "name": "wall.getReposts",
      "description": "Returns information about reposts of a post on user wall or community wall.",
      "access_token_type": [
        "user",
        "service"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. By default, current user ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "offset",
          "description": "Offset needed to return a specific subset of reposts.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "count",
          "description": "Number of reposts to return.",
          "type": "integer",
          "default": 20,
          "minimum": 0,
          "maximum": 1000
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_getReposts_response"
        }
      }
    },
    {
      "name": "wall.openComments",
      "access_token_type": [
        "user",
        "group"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "type": "integer",
          "required": true,
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "type": "integer",
          "required": true,
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_bool_response"
        }
      }
    },
    {
      "name": "wall.pin",
      "description": "Pins the post on wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      }
    },
    {
      "name": "wall.post",
      "description": "Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "friends_only",
          "description": "'1' — post will be available to friends only, '0' — post will be available to all users (default)",
          "type": "boolean"
        },
        {
          "name": "from_group",
          "description": "For a community: '1' — post will be published by the community, '0' — post will be published by the user (default)",
          "type": "boolean"
        },
        {
          "name": "message",
          "description": "(Required if 'attachments' is not set.) Text of the post.",
          "type": "string"
        },
        {
          "name": "attachments",
          "description": "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error will be thrown.\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "name": "services",
          "description": "List of services or websites the update will be exported to, if the user has so requested. Sample values: 'twitter', 'facebook'.",
          "type": "string"
        },
        {
          "name": "signed",
          "description": "Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)",
          "type": "boolean"
        },
        {
          "name": "publish_date",
          "description": "Publication date (in Unix time). If used, posting will be delayed until the set time.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "lat",
          "description": "Geographical latitude of a check-in, in degrees (from -90 to 90).",
          "type": "number"
        },
        {
          "name": "long",
          "description": "Geographical longitude of a check-in, in degrees (from -180 to 180).",
          "type": "number"
        },
        {
          "name": "place_id",
          "description": "ID of the location where the user was tagged.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "post_id",
          "description": "Post ID. Used for publishing of scheduled and suggested posts.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "guid",
          "type": "string"
        },
        {
          "name": "mark_as_ads",
          "type": "boolean",
          "default": false
        },
        {
          "name": "close_comments",
          "type": "boolean"
        },
        {
          "name": "donut_paid_duration",
          "type": "integer"
        },
        {
          "name": "mute_notifications",
          "type": "boolean"
        },
        {
          "name": "copyright",
          "type": "string"
        },
        {
          "name": "topic_id",
          "description": "Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method",
          "type": "integer",
          "minimum": 0,
          "enum": [
            0,
            1,
            7,
            12,
            16,
            19,
            21,
            23,
            25,
            26,
            32,
            43
          ],
          "enumNames": [
            "empty_topic",
            "art",
            "it",
            "games",
            "music",
            "photo",
            "science_and_tech",
            "sport",
            "travel",
            "tv_and_cinema",
            "humor",
            "fashion"
          ]
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_post_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_published"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_add_post"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_too_many_recipients"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_links_forbidden"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_post_limit_reached"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_donut"
        }
      ]
    },
    {
      "name": "wall.postAdsStealth",
      "description": "Allows to create hidden post which will not be shown on the community's wall and can be used for creating an ad with type \"Community post\".",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "required": true,
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "message",
          "description": "(Required if 'attachments' is not set.) Text of the post.",
          "type": "string"
        },
        {
          "name": "attachments",
          "description": "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error will be thrown.\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "name": "signed",
          "description": "Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)",
          "type": "boolean"
        },
        {
          "name": "lat",
          "description": "Geographical latitude of a check-in, in degrees (from -90 to 90).",
          "type": "number"
        },
        {
          "name": "long",
          "description": "Geographical longitude of a check-in, in degrees (from -180 to 180).",
          "type": "number"
        },
        {
          "name": "place_id",
          "description": "ID of the location where the user was tagged.",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "guid",
          "description": "Unique identifier to avoid duplication the same post.",
          "type": "string"
        },
        {
          "name": "link_button",
          "description": "Link button ID",
          "type": "string"
        },
        {
          "name": "link_title",
          "description": "Link title",
          "type": "string"
        },
        {
          "name": "link_image",
          "description": "Link image url",
          "type": "string"
        },
        {
          "name": "link_video",
          "description": "Link video ID in format \"<owner_id>_<media_id>\"",
          "type": "string"
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_postAdsStealth_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_published"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_add_post"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_too_many_recipients"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_links_forbidden"
        }
      ]
    },
    {
      "name": "wall.reportComment",
      "description": "Reports (submits a complaint about) a comment on a post on a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "ID of the user or community that owns the wall.",
          "type": "integer",
          "required": true,
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "comment_id",
          "description": "Comment ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "reason",
          "description": "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse",
          "type": "integer",
          "minimum": 0,
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "enumNames": [
            "spam",
            "child pornography",
            "extremism",
            "violence",
            "drug propaganda",
            "adult material",
            "insult abuse"
          ]
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      }
    },
    {
      "name": "wall.reportPost",
      "description": "Reports (submits a complaint about) a post on a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "ID of the user or community that owns the wall.",
          "type": "integer",
          "required": true,
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        },
        {
          "name": "reason",
          "description": "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse",
          "type": "integer",
          "minimum": 0,
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "enumNames": [
            "spam",
            "child pornography",
            "extremism",
            "violence",
            "drug propaganda",
            "adult material",
            "insult abuse"
          ]
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      }
    },
    {
      "name": "wall.repost",
      "description": "Reposts (copies) an object to a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "object",
          "description": "ID of the object to be reposted on the wall. Example: \"wall66748_3675\"",
          "type": "string",
          "required": true
        },
        {
          "name": "message",
          "description": "Comment to be added along with the reposted object.",
          "type": "string"
        },
        {
          "name": "group_id",
          "description": "Target community ID when reposting to a community.",
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "entity": "owner"
        },
        {
          "name": "mark_as_ads",
          "type": "boolean",
          "default": false
        },
        {
          "name": "mute_notifications",
          "type": "boolean"
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_repost_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_published"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_add_post"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_ads_post_limit_reached"
        }
      ]
    },
    {
      "name": "wall.restore",
      "description": "Restores a post deleted from a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID from whose wall the post was deleted. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "ID of the post to be restored.",
          "type": "integer",
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_post"
        },
        {
          "$ref": "../errors.json#/errors/api_error_wall_add_post"
        }
      ]
    },
    {
      "name": "wall.restoreComment",
      "description": "Restores a comment deleted from a user wall or community wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "User ID or community ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "comment_id",
          "description": "Comment ID.",
          "type": "integer",
          "required": true
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_comment"
        }
      ]
    },
    {
      "name": "wall.search",
      "description": "Allows to search posts on user or community walls.",
      "access_token_type": [
        "user",
        "service"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "user or community id. \"Remember that for a community 'owner_id' must be negative.\"",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "domain",
          "description": "user or community screen name.",
          "type": "string"
        },
        {
          "name": "query",
          "description": "search query string.",
          "type": "string",
          "maxLength": 9000
        },
        {
          "name": "owners_only",
          "description": "'1' - returns only page owner's posts.",
          "type": "boolean"
        },
        {
          "name": "count",
          "description": "count of posts to return.",
          "type": "integer",
          "default": 20,
          "minimum": 0,
          "maximum": 100
        },
        {
          "name": "offset",
          "description": "Offset needed to return a specific subset of posts.",
          "type": "integer",
          "default": 0,
          "minimum": 0
        },
        {
          "name": "extended",
          "description": "show extended post info.",
          "type": "boolean"
        },
        {
          "name": "fields",
          "type": "array",
          "items": {
            "$ref": "../base/objects.json#/definitions/base_user_group_fields"
          }
        }
      ],
      "responses": {
        "response": {
          "$ref": "../wall/responses.json#/definitions/wall_search_response"
        },
        "extendedResponse": {
          "$ref": "../wall/responses.json#/definitions/wall_search_extended_response"
        }
      },
      "errors": [
        {
          "$ref": "../errors.json#/errors/api_error_wall_access_post"
        }
      ]
    },
    {
      "name": "wall.unpin",
      "description": "Unpins the post on wall.",
      "access_token_type": [
        "user"
      ],
      "parameters": [
        {
          "name": "owner_id",
          "description": "ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.",
          "type": "integer",
          "format": "int64",
          "entity": "owner"
        },
        {
          "name": "post_id",
          "description": "Post ID.",
          "type": "integer",
          "required": true,
          "minimum": 0
        }
      ],
      "responses": {
        "response": {
          "$ref": "../base/responses.json#/definitions/base_ok_response"
        }
      }
    }
  ]
}
